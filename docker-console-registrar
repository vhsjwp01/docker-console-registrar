#!/bin/bash
#set -x

################################################################################
# CONSTANTS
################################################################################
#

TERM=vt100
PATH=/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin
export TERM PATH

SUCCESS=0
ERROR=1

DOCKER_CONSOLE_REGISTRAR_PORT=42001
STDOUT_OFFSET="    "

SCRIPT_NAME="${0}"

USAGE_ENDLINE="\n${STDOUT_OFFSET}${STDOUT_OFFSET}${STDOUT_OFFSET}${STDOUT_OFFSET}"
USAGE="${SCRIPT_NAME}${USAGE_ENDLINE}"
USAGE="${USAGE}[ --host <valid host or IPv4 address> ]${USAGE_ENDLINE}"
USAGE="${USAGE}[ --username <the username to use for authentication> ]${USAGE_ENDLINE}"
USAGE="${USAGE}[ --password <the password to use for authentication> ]${USAGE_ENDLINE}"
USAGE="${USAGE}[ --containerid <the associated docker container> ]${USAGE_ENDLINE}"

################################################################################
# VARIABLES
################################################################################
#

exit_code=${SUCCESS}
err_msg=""

################################################################################
# SUBROUTINES
################################################################################
#
# NAME: check_command
# WHAT: A subroutine to check the contents of lexically scoped ${1}
# WHY:  Lexically scoped ${1} should not be null, otherwise the command for
#       which we are searching is not present via the defined ${PATH} and we
#       should complain
#
check_command() {
    return_code=${SUCCESS}
    my_command=`echo "${1}" | sed -e 's?\`??g'`

    if [ "${my_command}" != "" ]; then
        my_command_check=`unalias "${1}" 2> /dev/null ; which "${1}" 2> /dev/null`

        if [ "${my_command_check}" = "" ]; then
            err_msg="ERROR:  Could not locate the command ${my_command} on this system"
            return_code=${ERROR}
        else
            my_command=`echo "${my_command}" | sed -e 's/-/_/g'`
            eval my_${my_command}="${my_command_check}"
        fi

    else
        err_msg="No command was specified"
        return_code=${ERROR}
    fi

    return ${return_code}
}

#
# ------------------------------------------------------------------------------
#

################################################################################
# MAIN
################################################################################
#

# WHAT: Make sure we have some needed commands
# WHY:  Cannot proceed otherwise
#
if [ ${exit_code} -eq ${SUCCESS} ]; then

    for command in awk nc sed uname ; do
        check_command "${command}"
        let exit_code=${exit_code}+${return_code}
    done

fi

# WHAT: Determine our platform
# WHY:  Needed later
#
if [ ${exit_code} -eq ${SUCCESS} ]; then
    my_plat=`${my_uname} -s`

    case ${my_plat} in

        Linux)
            check_command "md5sum"

            if [ ${return_code} -eq ${SUCCESS} ]; then
                my_md5_command="${my_md5sum}"
            fi

        ;;

        Darwin)
            check_command "md5"

            if [ ${return_code} -eq ${SUCCESS} ]; then
                my_md5_command="${my_md5}"
            fi

        ;;

    esac

fi

# WHAT: Make sure we have necessary arguments
# WHY:  Cannot proceed otherwise
#
if [ ${exit_code} -eq ${SUCCESS} ]; then

    while (( "${#}" )); do
        key=`echo "${1}" | ${my_sed} -e 's?\`??g'`
        value=`echo "${2}" | ${my_sed} -e 's?\`??g'`

        case "${key}" in

            --host|--username|--password|--containerid)
                key=`echo "${key}" | ${my_sed} -e 's?^--??g'`

                if [ "${value}" != "" ]; then
                    eval ${key}="${value}"
                    shift
                    shift
                else
                    echo "${STDOUT_OFFSET}ERROR:  No value assignment can be made for command line argument \"--${key}\""
                    exit_code=${ERROR}
                    shift
                fi

            ;;

            *)
                # We bail immediately on unknown or malformed inputs
                echo "${STDOUT_OFFSET}ERROR:  Unknown command line argument ... exiting"
                exit
            ;;

        esac

    done

    if [ "${host}" = "" -o "${username}" = "" -o "${password}" = "" -o "${containerid}" = "" ]; then
        err_msg="Not enough command line arguments detected"
        exit_code=${ERROR}
    fi

fi

# WHAT: Sanitize ${username} and ${password}
# WHY:  Cannot continue otherwise
#
if [ ${exit_code} -eq ${SUCCESS} ]; then
    sanitized_username=`echo "${username}" | sed -e 's?[^a-zA-Z0-9]??g'`
    sanitized_password=`echo "${password}" | sed -e 's?[^a-zA-Z0-9]??g'`

    if [ "${sanitized_username}" != "${username}" -o "${sanitized_password}" != "${password}" ]; then
        err_msg="Only the following characters can be used in the username or password: a-z, A-Z, 0-9"
        exit_code=${ERROR}
    fi

fi

# WHAT: Try to connect to the remote docker console manager of the provided host
# WHY:  The reason we are here
#
if [ ${exit_code} -eq ${SUCCESS} ]; then
    auth_hash=`echo "${username}:${password}" | ${my_md5_command} | ${my_awk} '{print $1}'`
    echo "${auth_hash}:${containerid}" | ${my_nc} ${host} ${DOCKER_CONSOLE_REGISTRAR_PORT}
fi

# WHAT: Complain if necessary and exit
# WHY:  Success or failure, either way we are through
#
if [ ${exit_code} -ne ${SUCCESS} ]; then

    if [ "${err_msg}" != "" ]; then
        echo -ne "\n\n"
        echo -ne "${STDOUT_OFFSET}ERROR:  ${err_msg} ... processing halted\n"
        echo
    fi

    echo
    echo -ne "${STDOUT_OFFSET}USAGE:  ${USAGE}\n"
    echo
fi

exit ${exit_code}
